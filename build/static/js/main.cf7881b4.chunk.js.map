{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["library","add","fab","fas","far","App","props","toggle","bind","nopetoggle","state","collapse","isOpened","nope","this","setState","data","console","log","name","person","id","age","img","src","alt","className","detail","superOnswipe","map","d","key","onSwipeLeft","onSwipeRight","onClick","renderCards","color","size","icon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAWAA,IAAQC,IAAIC,IAAKC,IAAKC,K,IAyGPC,E,YAtGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,MAAQ,CAAEC,UAAU,EAAQC,SAAU,EAAKN,MAAMM,SAAUC,MAAM,GAJrD,E,sEAOjBC,KAAKC,SAAS,SAAAL,GAAK,MAAK,CAAEC,UAAWD,EAAMC,c,mCAG3CG,KAAKC,SAAS,SAAAL,GAAK,MAAK,CAAEG,MAAOH,EAAMG,U,kCAE7BG,GACVC,QAAQC,IAAIF,EAAKG,KAAO,oBACxBL,KAAKC,SAAS,CAAEJ,UAAU,M,mCAEfK,GACXC,QAAQC,IAAIF,EAAKG,KAAO,qBACxBL,KAAKC,SAAS,CAAEJ,UAAU,M,oCAEb,IAAD,OACRS,EAAS,CACD,CACEC,GAAI,EACJF,KAAM,OACNG,IAAK,KACLC,IAAK,yBAAKC,IAAM,aAAaC,IAAM,OAAOC,UAAY,eACtDC,OAAQ,yBAEV,CACEN,GAAI,EACJF,KAAM,SACNG,IAAK,KACLC,IAAK,yBAAKC,IAAM,eAAeC,IAAM,SAASC,UAAY,eAC1DC,OAAQ,2BAEV,CACEN,GAAI,EACJF,KAAM,OACNG,IAAK,KACLC,IAAK,yBAAKC,IAAM,aAAaC,IAAM,OAAOC,UAAY,eACtDC,OAAQ,yBAEV,CACEN,GAAI,EACJF,KAAM,QACNG,IAAK,KACLC,IAAK,yBAAKC,IAAM,cAAcC,IAAM,QAAQC,UAAY,eACxDC,OAAQ,2BAGhBC,EAAed,KAAKR,MAAMsB,aAChC,OAAOR,EAAOS,IAAI,SAACC,GACjB,OAQI,kBAAC,IAAD,CACAC,IAAKD,EAAET,GACPO,aAAcA,EACdI,YAAa,EAAKA,YAAYxB,KAAK,GACnCyB,aAAc,EAAKA,aAAazB,KAAK,GACrCQ,KAAMc,GACLA,EAAEP,IACH,yBAAKG,UAAY,QACdI,EAAEX,KADL,KACaW,EAAER,KAEf,2BAAOI,UAAY,SAASQ,QAAW,WAAO,EAAK3B,WAAnD,QACA,kBAAC,WAAD,CAAUK,SAAU,EAAKF,MAAMC,UAC5BmB,EAAEH,a,+BAUJ,IAAD,OACN,OACA,6BACE,kBAAC,IAAD,KACCb,KAAKqB,eAEN,yBAAKT,UAAY,gBACf,4BAAQQ,QAAW,WAAO,EAAKzB,cAAeiB,UAAW,YACvD,kBAAC,IAAD,CAAiBU,MAAM,UAAUC,KAAM,KAAKC,KAAM,CAAC,MAAO,YAE5D,4BAAQJ,QAAW,WAAOjB,QAAQC,IAAI,SAAUQ,UAAW,OACzD,kBAAC,IAAD,CAAkBU,MAAM,UAAUC,KAAM,KAAKC,KAAM,CAAC,MAAO,kB,GA/FnDC,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cf7881b4.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport { Card, CardWrapper} from 'react-swipeable-cards';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Collapse } from 'react-collapse';\n//import { CSSTransition } from \"react-transition-group\";\n\nlibrary.add(fab, fas, far);\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.nopetoggle = this.nopetoggle.bind(this);\n    this.state = { collapse: false , isOpened: this.props.isOpened, nope: false};\n  }\n  toggle() {\n    this.setState(state => ({ collapse: !state.collapse }));\n  }\n  nopetoggle() {\n    this.setState(state => ({ nope: !state.nope }));\n  }\n  onSwipeLeft(data) {\n    console.log(data.name + \" was Leftswiped.\");\n    this.setState({ collapse: false });\n  }\n  onSwipeRight(data){\n    console.log(data.name + \" was Rightswiped.\");\n    this.setState({ collapse: false });\n  }\n  renderCards() {\n    var person = [\n                {\n                  id: 1,\n                  name: \"Taro\",\n                  age: \"22\",\n                  img: <img src = './taro.png' alt = 'taro' className = 'person-img'/>,\n                  detail: \"Taro's details screen\"\n                },\n                {\n                  id: 2,\n                  name: \"Hanako\",\n                  age: \"21\",\n                  img: <img src = './hanako.png' alt = 'hanako' className = 'person-img'/>,\n                  detail: \"Hanako's details screen\"\n                },\n                {\n                  id: 3,\n                  name: \"Rina\",\n                  age: \"23\",\n                  img: <img src = './rina.png' alt = 'rina' className = 'person-img'/>,\n                  detail: \"Rina's details screen\"\n                },\n                {\n                  id: 4,\n                  name: \"Kenta\",\n                  age: \"25\",\n                  img: <img src = './kenta.png' alt = 'kenta' className = 'person-img'/>,\n                  detail: \"Kenta's details screen\"\n                }\n              ];\n    const superOnswipe = this.props.superOnswipe\n    return person.map((d) => {\n      return(\n      /*<CSSTransition\n      key={d.id}\n      in ={this.state.nope}\n      timeout={200}\n      classNames = \"my-card\">\n      \n      <div className='card-container'>*/\n          <Card\n          key={d.id}\n          superOnswipe={superOnswipe}\n          onSwipeLeft={this.onSwipeLeft.bind(this)}\n          onSwipeRight={this.onSwipeRight.bind(this)}\n          data={d}>\n          {d.img}\n          <div className = 'font'>\n            {d.name}, {d.age}\n          </div>\n          <labelã€€className = 'detail' onClick = {() => {this.toggle()}}>&nbsp;</label>\n          <Collapse isOpened={this.state.collapse}>\n            {d.detail}\n            </Collapse>\n          </Card>\n          /*</div>\n          </CSSTransition>*/\n  \n        );\n      });\n    }\n\n  render(){\n    return (\n    <div>\n      <CardWrapper>\n      {this.renderCards()}\n      </CardWrapper>\n      <div className = 'btn-position'>\n        <button onClick = {() => {this.nopetoggle()}} className ='btn nope'>\n          <FontAwesomeIcon color='#dc143c' size ='lg' icon={['fas', 'times']} />\n        </button>\n        <button onClick = {() => {console.log('Like')}} className ='btn'>\n          <FontAwesomeIcon  color='#3cb371' size ='lg' icon={['fas', 'heart']} />\n        </button>\n      </div>   \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}